<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.noodle.orm.mapper.VocabularyMapper">
  <resultMap id="BaseResultMap" type="org.noodle.orm.model.Vocabulary">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="words_id" jdbcType="BIGINT" property="wordsId" />
    <result column="review_time" jdbcType="INTEGER" property="reviewTime" />
    <result column="review_schedule_time1" jdbcType="BIGINT" property="reviewScheduleTime1" />
    <result column="review_schedule_time2" jdbcType="BIGINT" property="reviewScheduleTime2" />
    <result column="review_schedule_time3" jdbcType="BIGINT" property="reviewScheduleTime3" />
    <result column="review_schedule_time4" jdbcType="BIGINT" property="reviewScheduleTime4" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from vocabulary
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="org.noodle.orm.model.Vocabulary">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into vocabulary (id, user_id, words_id, 
      review_time, review_schedule_time1, review_schedule_time2, 
      review_schedule_time3, review_schedule_time4)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{wordsId,jdbcType=BIGINT}, 
      #{reviewTime,jdbcType=INTEGER}, #{reviewScheduleTime1,jdbcType=BIGINT}, #{reviewScheduleTime2,jdbcType=BIGINT}, 
      #{reviewScheduleTime3,jdbcType=BIGINT}, #{reviewScheduleTime4,jdbcType=BIGINT})
  </insert>
  <update id="updateByPrimaryKey" parameterType="org.noodle.orm.model.Vocabulary">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update vocabulary
    set user_id = #{userId,jdbcType=BIGINT},
      words_id = #{wordsId,jdbcType=BIGINT},
      review_time = #{reviewTime,jdbcType=INTEGER},
      review_schedule_time1 = #{reviewScheduleTime1,jdbcType=BIGINT},
      review_schedule_time2 = #{reviewScheduleTime2,jdbcType=BIGINT},
      review_schedule_time3 = #{reviewScheduleTime3,jdbcType=BIGINT},
      review_schedule_time4 = #{reviewScheduleTime4,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, user_id, words_id, review_time, review_schedule_time1, review_schedule_time2, 
    review_schedule_time3, review_schedule_time4
    from vocabulary
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, user_id, words_id, review_time, review_schedule_time1, review_schedule_time2, 
    review_schedule_time3, review_schedule_time4
    from vocabulary
  </select>
  <select id="selectByWordsId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      根据单词id查, 一般用于判断是否存在
    -->
    select id, user_id, words_id, review_time, review_schedule_time1, review_schedule_time2,
    review_schedule_time3, review_schedule_time4
    from vocabulary
    where words_id = #{wordsId,jdbcType=BIGINT}
  </select>
  <select id="selectNeedReviewByUser" parameterType="map" resultMap="BaseResultMap">
    <!--
      根据用户查应复习词汇
    -->
    select id, user_id, words_id, review_time, review_schedule_time1, review_schedule_time2,
    review_schedule_time3, review_schedule_time4
    from vocabulary
    where user_id = #{userId,jdbcType=BIGINT}
    <![CDATA[
      and ( review_time=0 and review_schedule_time1 < #{reviewTime,jdbcType=BIGINT} or
            review_time=1 and review_schedule_time2 < #{reviewTime,jdbcType=BIGINT} or
            review_time=2 and review_schedule_time3 < #{reviewTime,jdbcType=BIGINT} or
            review_time=3 and review_schedule_time4 < #{reviewTime,jdbcType=BIGINT}
            )
      ]]>
  </select>
</mapper>